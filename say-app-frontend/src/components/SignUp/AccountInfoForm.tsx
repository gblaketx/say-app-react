import * as React from 'react';
import PropTypes from 'prop-types';
import {
  Button,
  Form,
  FormFeedback,
  FormGroup,
  Input,
  Jumbotron,
  Label,
} from 'reactstrap';
import Select from 'react-select';
import { ValueType } from 'react-select/src/types';
import { UserType, SubmitterType } from '../../schema';
import styles from './AccountInfoForm.module.css';

// TODO: Convert React styling to namespace.
interface School {
  label: string;
  value: string;
}

// TODO: Replace with real data
const staticSchoolsData = [
  '49ers Academny',
  'Central Middle School',
  'Martin Luther King Jr. Middle School',
  'The Ministry of Truth',
];

const schoolOptions = staticSchoolsData.map((school): School => (
  {
    label: school,
    value: school,
  }
));

interface AccountInfoFormProps {
  onSubmit: (event: React.FormEvent) => void;
  validateOnSubmit?: boolean;
  title: string;
  submitButtonText: string;
  passwordConfig?: {
    passwordTitle: React.ReactNode | string;
    passwordConfirmTitle: React.ReactNode;
  };
  showStudentInputs?: boolean;
  user?: UserType;
}

interface AccountInfoFormState {
  selectedSchool?: School;
  newPassword: string;
  validate: {
    isEmailValid: boolean;
    isPasswordValid: boolean;
  };
}

type StudentInfoPlaceholders =
  Partial<
  Pick<SubmitterType, 'teacher' | 'bio'> &
  {
    grade: string;
    school: School;
  }
  >;

class AccountInfoForm extends React.Component<AccountInfoFormProps> {
  private static propTypes = {
    /** The callback fired when the form is submitted. */
    onSubmit: PropTypes.func.isRequired,

    /**
     * Whether or not the form should be validated by the frontend
     * upon submission.
     */
    validateOnSubmit: PropTypes.bool,

    /** The title of the form in the jumbotron. */
    title: PropTypes.string.isRequired,

    /** The text on the submission button. */
    submitButtonText: PropTypes.string.isRequired,

    /**
     * Configuration for the password titles. If not provided,
     * a message indicating the password is autogenerated is displayed.
     */
    passwordConfig: PropTypes.shape({
      passwordTitle: PropTypes.element.isRequired,
      passwordConfirmTitle: PropTypes.oneOfType([
        PropTypes.element,
        PropTypes.string,
      ]).isRequired,
    }),

    /**
     * Whether or not student-specific input elements such as schoool and
     * and bio should display.
     */
    showStudentInputs: PropTypes.bool,
  }

  private static defaultProps = {
    passwordConfig: undefined,
    showStudentInputs: true,
    validateOnSubmit: true,
  }

  public state: AccountInfoFormState = {
    selectedSchool: undefined,
    newPassword: '',
    validate: {
      isEmailValid: true,
      isPasswordValid: true,
    },
  }

  private selectSchool = (selected: ValueType<School>): void => {
    console.log(selected);
    this.setState({ selectedSchool: selected });
  }

  private changePassword = (e: React.FormEvent): void => {
    this.setState({ newPassword: (e.target as HTMLFormElement).value });
  }

  private validateOnSubmit = (e: React.FormEvent): void => {
    console.log(e.target); // TODO: Do form validation
  }

  private validatePassword = (e: React.FormEvent): void => {
    const { newPassword, validate } = this.state;
    const newPasswordConfirm = (e.target as HTMLFormElement).value;
    validate.isPasswordValid = newPasswordConfirm === newPassword;
    this.setState({ validate });
  }

  private validateEmail = (e: React.FormEvent): void => {
    const emailRex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    const { validate } = this.state;
    const email = (e.target as HTMLFormElement).value;
    validate.isEmailValid = emailRex.test(email);
    this.setState({ validate });
  }

  private renderPasswordForms = (): React.ReactNode => {
    const { passwordConfig } = this.props;
    if (passwordConfig === undefined) {
      return <span>A password will be auto-generated on creation</span>;
    }
    const { validate: { isPasswordValid } } = this.state;
    return (
      <React.Fragment>
        <FormGroup className={styles.boldLabel}>
          <Label>
            {passwordConfig.passwordTitle}
          </Label>
          <Input name="password" type="password" onChange={this.changePassword} />
        </FormGroup>
        <FormGroup className={styles.boldLabel}>
          <Label>
            {passwordConfig.passwordConfirmTitle}
          </Label>
          <Input
            invalid={!isPasswordValid}
            type="password"
            onChange={this.validatePassword}
          />
          <FormFeedback>Make sure passwords match</FormFeedback>
        </FormGroup>
      </React.Fragment>
    );
  }

  private getStudentPlaceholders = (): StudentInfoPlaceholders => {
    // eslint-disable-next-line one-var, one-var-declaration-per-line
    let school, teacher, grade, bio;
    const { user } = this.props;

    if (user !== undefined) {
      ({ school, teacher, grade, bio } = user as SubmitterType);
      school = {
        label: school,
        value: school,
      };
      grade = grade.toString();
    }

    return {
      school,
      teacher,
      grade,
      bio,
    };
  }

  /* TODO: eslint-disable camelcase */
  private getUserPlaceholders = (): Partial<Omit<UserType, 'id' | 'role'>> => {
    // eslint-disable-next-line one-var, one-var-declaration-per-line
    let first_name, last_name, email;
    const { user } = this.props;
    if (user !== undefined) {
      ({ first_name, last_name, email } = user);
    }
    return {
      first_name,
      last_name,
      email,
    };
  }

  // TODO: Have unselected school option
  // TODO: import grades from const
  // TODO: grade selection for users outside of given grade range?
  private renderStudentInputs = (): React.ReactNode => {
    const { selectedSchool } = this.state;
    const placeholders = this.getStudentPlaceholders();

    return (
      <React.Fragment>
        <FormGroup style={{ textAlign: 'left' }}>
          <Label className={styles.boldLabel}>School</Label>
          <Select<School>
            defaultValue={placeholders.school}
            value={selectedSchool}
            onChange={this.selectSchool}
            options={schoolOptions}
          />
        </FormGroup>
        <FormGroup className={styles.boldLabel}>
          <Label>Teacher</Label>
          <Input name="teacher" placeholder={placeholders.teacher} />
        </FormGroup>
        <FormGroup className={styles.boldLabel}>
          <Label>Grade</Label>
          <Input name="grade" type="select" defaultValue={placeholders.grade}>
            {[undefined, 6, 7, 8].map((num): React.ReactNode => (
              <option key={num === undefined ? 0 : num}>{num}</option>))
            }
          </Input>
        </FormGroup>
        <FormGroup className={styles.boldLabel}>
          <Label>
            Bio
            <div style={{ fontWeight: 'normal' }}>
              Include a short personal bio with your submission.
              In one or two third-person sentences, tell us about yourself!
              If we publish your submission, we&apos;ll include your bio as well.
              If you want to change it later, don&apos;t worry!
              You can edit your bio anytime before the submission deadline.
            </div>
          </Label>
          <Input
            className={styles.bioTextArea}
            name="bio"
            placeholder={placeholders.bio}
            type="textarea"
          />
        </FormGroup>
      </React.Fragment>
    );
  };

  public render(): React.ReactNode {
    const {
      onSubmit,
      showStudentInputs,
      submitButtonText,
      title,
      validateOnSubmit,
    } = this.props;
    const { validate } = this.state;
    const placeholders = this.getUserPlaceholders();


    let onSubmitFull;
    if (validateOnSubmit) {
      onSubmitFull = (e: React.FormEvent): void => {
        this.validateOnSubmit(e);
        onSubmit(e);
      };
    } else {
      onSubmitFull = onSubmit;
    }
    return (
      <div style={{ paddingBottom: 16 }}>
        <Jumbotron>
          <h1>{title}</h1>
        </Jumbotron>
        <Form className={styles.scaledForm} onSubmit={onSubmitFull}>
          <FormGroup className={styles.boldLabel}>
            <Label>First Name</Label>
            <Input name="firstName" placeholder={placeholders.first_name} />
          </FormGroup>
          <FormGroup className={styles.boldLabel}>
            <Label>Last Name</Label>
            <Input name="lastName" placeholder={placeholders.last_name} />
          </FormGroup>
          <FormGroup className={styles.boldLabel}>
            <Label>Email</Label>
            <Input
              name="email"
              invalid={!validate.isEmailValid}
              type="email"
              onChange={this.validateEmail}
              placeholder={placeholders.email}
            />
            <FormFeedback>Invalid email</FormFeedback>
          </FormGroup>
          {this.renderPasswordForms()}
          {showStudentInputs && this.renderStudentInputs()}
          <Button color="primary" size="lg" type="submit">
            {submitButtonText}
          </Button>
        </Form>
      </div>
    );
  }
}

export default AccountInfoForm;
